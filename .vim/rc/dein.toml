[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
let g:precious_enable_switchers = {
  \	"vue" : {
  \		"setfiletype" : 0
  \	},
  \}
'''

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'vim-scripts/DirDiff.vim'

[[plugins]]
repo = 'tyru/open-browser.vim'

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
#
# [[plugins]]
# repo = 'Shougo/vinarise'

[[plugins]]
repo = 'kshenoy/vim-signature'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_default_executive = 'vim_lsp'
let g:vista_sidebar_width = 40
let g:vista_echo_cursor_strategy = 'both'
let g:vista_stay_on_open = 0

function! NearestMethodOrFunction() abort
    return get(b:, 'vista_nearest_method_or_function', '')
endfunction

set statusline+=%{NearestMethodOrFunction()}

autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends_on = ['vim-fugitive', 'vista.nvim']
hook_add = '''
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'method' ] ],
        \   'right': [
        \       [ 'lineinfo' ],
        \       [ 'percent' ],
        \       [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
        \   'gitbranch': 'fugitive#head',
        \   'filename':  'LightlineFilename',
        \   'method': 'NearestMethodOrFunction'
    \ },
    \ }
function! LightlineFilename()
    let l:ap = expand("%:p")
    let l:p = substitute(ap, $HOME, "~", "")

    let l:wid = winwidth(winnr()) / 3

    if strlen(p) > wid
        let p = strcharpart(p, 0, wid).".../".expand("%:t")
    endif

    return p
endfunction
'''
hook_source = '''
  augroup ReloadLightLine
    autocmd BufRead,BufNewFile * call lightline#colorscheme()
  augroup END
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
    \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
'''

# [[plugins]]
# repo = 'kana/vim-operator-user'
#
# [[plugins]]
# repo = 'rhysd/vim-operator-surround'

# {{ git
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
	let g:committia_open_only_vim_starting = 1
	let g:committia_hooks = {}
	function! g:committia_hooks.edit_open(info)
	    " Additional settings
	    setlocal spell

	    " If no commit message, start with insert mode
	    if a:info.vcs ==# 'git' && getline(1) ==# ''
	        startinsert
	    end

	    " Scroll the diff window from insert mode
	    " Map <C-n> and <C-p>
	    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
	    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

	endfunction
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'mhinz/vim-signify'


[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = ['open-browser.vim']
# }}

# [[plugins]]
# repo = 'Shougo/vimfiler'

[[plugins]]
repo = 'Shougo/vimshell'

# {{ color scheme
[[plugins]]
repo = 'sheerun/vim-wombat-scheme'

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'b4b4r07/solarized.vim'

#[[plugins]]
#repo = 'cocopon/iceberg.vim'
#hook_add = '''
#  if (has("termguicolors"))
#   set termguicolors
#  endif
#  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
#  au MyAutoCmd VimEnter * nested colorscheme iceberg
#'''
# }}

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'b4b4r07/vim-ansible-vault'

[[plugins]]
repo = 'scrooloose/nerdtree'
# on_cmd = ['NERDTree']
hook_add = '''
	let NERDTreeShowHidden = 1
	function! ExecuteNERDTree()
		"b:nerdstatus = 1 : NERDTree 表示中
		"b:nerdstatus = 2 : NERDTree 非表示中

		if !exists('g:nerdstatus')
			execute 'NERDTree ./'
			let g:windowWidth = winwidth(winnr())
			let g:nerdtreebuf = bufnr('')
			let g:nerdstatus = 1

		elseif g:nerdstatus == 1
			execute 'wincmd t'
			execute 'vertical resize' 0
			execute 'wincmd p'
			let g:nerdstatus = 2
		elseif g:nerdstatus == 2
			execute 'wincmd t'
			execute 'vertical resize' g:windowWidth
			let g:nerdstatus = 1
		endif
	endfunction
'''
