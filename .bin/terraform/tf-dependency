#!/bin/zsh
#
# Description:
#  This script check dependency between resources included target files and other resources in the same project.
#

set -eu

function usage() {
}

function create_self_state_ref() {
    cat << EOF
data "terraform_remote_state" "self" {
  backend = "s3"

  config = {
    bucket = "$1"
    key    = "$2"
    region = "$3"
  }
}
EOF
}

function create_output_self() {
    cat << EOF
output "self_$1" {
    value = $2
}
EOF
}

tgtTfFiles=""
checkOnly=true
checkAll=false
pretty=false
tmpDeps=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 5 | head -n 1)-deps.csv

while getopts ayph flag
do
    case "${flag}" in
        y) checkOnly=false;;
        a) checkAll=true;;
        p) pretty=true;;
        h) usage $0; exit 0;;
    esac
done

if [[ "$checkAll" == false ]]; then
    tgtTfFiles=$(find -- *.tf | peco --prompt "select target files")
else
    tgtTfFiles=$(find -- *.tf)
fi

if [[ -f self_state.tf && $checkOnly == false ]]; then
    key=$(cat *.tf | hcledit attribute get terraform.backend.key)
    bucket=$(cat *.tf | hcledit attribute get terraform.backend.bucket)
    region=$(cat *.tf | hcledit attribute get terraform.backend.region)

    create_self_state_ref $key $bucket $region > self_state.tf
fi

# check dependency
for t in $(echo $tgtTfFiles); do
    while read -r r; do
        if [[ $(echo $r | cut -d. -f1) == "resource" ]]; then
            r=$(echo $r | cut -d. -f2-)
        fi
        detected=""

        for c in *.tf; do
            [[ $c == $t ]] && continue

            if grep -q $r $c; then
                detected=$c
                break
            fi
        done

        if [[ $detected != "" ]]; then
            if [[ $checkOnly == true ]]; then
                if [[ $pretty == true ]]; then
                    echo "$t:$r,$detected" >> $tmpDeps
                else
                    echo "$t:$r,$detected"
                fi
            else
                create_output_self $r $r >> self_state.tf
                gsed -i -e "s/$r/data.terraform_remote_state.self.outputs.self_$r/g" $detected
            fi
        fi
    done < <(hcledit block list < $t | grep -v "data.terraform_remote_state")
done

if [[ $pretty == true ]]; then
    for f in *.tf; do
        if ! grep -q $f $tmpDeps; then
            continue
        fi

        echo "$f is"
        echo "  depend on"
        while read -r l; do
            from=$(echo $l | cut -d: -f1)
            v=$(echo $l | cut -d: -f2 | cut -d, -f1)
            echo "      $from, $v"
        done < <(grep ",$f$" $tmpDeps)
        # refered from
        echo "  refered from"
        while read -r l; do
            from=$(echo $l | cut -d, -f2)
            echo "      $from"
        done < <(grep "^$f:" $tmpDeps)
    done
    rm $tmpDeps
fi
