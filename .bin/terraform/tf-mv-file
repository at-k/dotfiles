#!/bin/zsh
#
# Description:
#  This script is used to move terraform state from one project to another.
#  If you want to move state in the same project, use `moved block` instead.
#

set -eu

OUTPUT_LIST=_output_list
OUTPUT_TO=_outputs.tf
OUTPUTS=outputs.tf
OVERRIDE=override.tf
REMOTE_STATE=_remote_state.tf
TFSTATE=tfstate
TFSTATE_LIST=_tfstate_list

function usage() {
    echo "Usage: $1 [-y] -s <src pj dir> -d <dst pj dir> [-f <target files>]"
    echo "  -y: dry run"
    echo "  -s: source project directory"
    echo "  -d: destination project directory"
    echo "  -f: target files"
    echo "  -h: show this help"
}

function error() {
}

function override_backend {
    cat << EOF > $OVERRIDE
terraform {
  backend "local" {
  }
}
EOF
}

function restore_backend_from_override {
    rm -f $OVERRIDE
}

function _pushd {
    pushd "$@" > /dev/null
}

function _popd {
    popd "$@" > /dev/null
}

function state_mv {
    local srcPjDir=$1
    local dstPjDir=$2
    local rsc=$3
    local dryRun=$4

    echo terraform state mv -state="${srcPjDir}"/$TFSTATE -state-out="${dstPjDir}"/$TFSTATE \'"$rsc"\' \'"$rsc"\'
    if [[ $dryRun == "false" ]]; then
        terraform state mv -state="${srcPjDir}"/$TFSTATE -state-out="${dstPjDir}"/$TFSTATE $rsc $rsc
    fi
}

function output_mv {
    local srcPjDir=$1
    local dstPjDir=$2
    local rsc=$3
    local stateAlias=$4
    local dryRun=$5

    if [[ -f $srcPjDir/$OUTPUT_LIST ]]; then
        while read kv; do
            local k=$(echo $kv | cut -d, -f1)
            local v=$(echo $kv | cut -d, -f2)

            local label=$(echo $k | cut -d. -f2)

            echo "echo \"output \\\"$label\\\" {\\n value = $v \\n}\" >> $dstPjDir/$OUTPUT_TO"
            echo hcledit attribute set $k.value data.terraform_remote_state.$stateAlias.outputs.$label --update --file $srcPjDir/$OUTPUTS

            if [[ $dryRun == "false" ]]; then
                echo "output \"$label\" {\n value = $v \n}" >> "$dstPjDir"/$OUTPUT_TO
                hcledit attribute set $k.value data.terraform_remote_state.$stateAlias.outputs.$label --update --file $srcPjDir/$OUTPUTS
            fi
        done < <(grep "$rsc" "$srcPjDir"/$OUTPUT_LIST)
    fi
}

function create_remote_state_ref {
    cat << EOF > $3
data "terraform_remote_state" "$1" {
  backend = "local"

  config = {
    path = "$2"
  }
}
EOF
}

function init_pj {
    local pjDir=$1
    _pushd "$pjDir" || exit

    terraform init
    terraform state pull > $TFSTATE
    terraform state list > $TFSTATE_LIST

    cat *.tf | sed '$ s/^}$/}\n/g' | hcledit block get output > __output

    echo > $OUTPUT_LIST
    while read b; do
      v=$(hcledit attribute get $b.value < __output)
      if [[ $(echo $v | wc -l) -ne 1 ]]; then
        echo "error: fail to create output list, invalid output value detected\n$b, $v"
        exit 1
      fi
      echo $b, $v >> $OUTPUT_LIST
    done < <(hcledit block list < __output)

    rm __output

    _popd || exit
}

function check_nodiff {
    local pjDir=$1

    _pushd "$pjDir" || exit
    override_backend
    terraform init --reconfigure
    if terraform plan --state=$TFSTATE -detailed-exitcode; then
        echo "[ok] no change on $pjDir"
    else
        echo "[error] change detected or plan failed on $pjDir"
        restore_backend_from_override
        exit 1
    fi
    restore_backend_from_override
    _popd || exit
}

dryRun="true"

srcPjDir=
dstPjDir=
tgtTfFiles=

while getopts ys:d:f: flag
do
    case "${flag}" in
        y) dryRun="false";;
        s) srcPjDir=${OPTARG};;
        d) dstPjDir=${OPTARG};;
        f) tgtTfFiles=${OPTARG};;
        h) usage $0; exit 0;;
    esac
done

echo "dry run: $dryRun"

if [[ ! -d "$srcPjDir" ]]; then
  echo "error: invalid src pj directory $srcPjDir"
  exit 1
fi

if [[ ! -d "$dstPjDir" ]]; then
  echo "error: invalid dst pj directory $dstPjDir"
  exit 1
fi

srcPjDir=$(echo "$srcPjDir" | sed 's/\/$//')
dstPjDir=$(echo "$dstPjDir" | sed 's/\/$//')

echo "initializing dstDir: $dstPjDir ..."
init_pj "$dstPjDir"

echo "initializing srcDir: $srcPjDir ..."
init_pj "$srcPjDir"
relpath=$(grealpath -m --relative-to="$srcPjDir" "$dstPjDir")/$TFSTATE
stateAlias=$(basename $dstPjDir)_$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 5 | head -n 1)
create_remote_state_ref $stateAlias $relpath "$srcPjDir"/$REMOTE_STATE

if [[ "$tgtTfFiles" == "" ]]; then
  _pushd "$srcPjDir" || exit
  tgtTfFiles=$(find -- *.tf | peco --prompt "select target files")
  _popd || exit
fi

for tgtTf in $(echo $tgtTfFiles); do
  for rsc in $(hcledit block list < "${srcPjDir}/$tgtTf" | grep -e "^resource" -e "^module" | sort); do
    if [[ $(hcledit attribute get "${rsc}.for_each" < "${srcPjDir}/$tgtTf" | wc -l) -eq 0 ]]; then
      # no for_each resource
      rsc=${rsc//#resource./}
      state_mv "$srcPjDir" "$dstPjDir" "$rsc" "$dryRun"
      output_mv "$srcPjDir" "$dstPjDir" "$rsc" "$stateAlias" "$dryRun"
    else
      # for_each resource
      rsc=${rsc//#resource./}

      while read -r each_rsc; do
        state_mv "$srcPjDir" "$dstPjDir" "$each_rsc" "$dryRun"
        output_mv "$srcPjDir" "$dstPjDir" "$each_rsc" "$stateAlias" "$dryRun"
      done < <(grep "$rsc" "${srcPjDir}"/$TFSTATE_LIST)
    fi
  done

  if [[ $dryRun == "true" ]]; then
      continue
  fi

  mv ${srcPjDir}/${tgtTf} ${dstPjDir}/${tgtTf}

  check_nodiff "$dstPjDir"
  check_nodiff "$srcPjDir"
done


if [[ $dryRun == "false" ]]; then
    echo "state and file move completed"
    echo "please check the result and run following command to apply"
    echo
    echo "cd $srcPjDir"
    echo "terraform state push $TFSTATE"
    echo "terraform init --reconfigure"
    echo "terraform plan"
    echo "git add $tgtFiles"
    echo "cd $dstPjDir"
    echo "terraform state push $TFSTATE"
    echo "terraform init --reconfigure"
    echo "terraform plan"
    echo "git add $tgtFiles"
fi
