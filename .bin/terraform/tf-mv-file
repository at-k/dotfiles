#!/bin/zsh
#
# Description:
#  This script is used to move terraform state from one project to another.
#  If you want to move state in the same project, use `moved block` instead.
#

set -eu

sId=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 5 | head -n 1)

# refered file
OUTPUTS=outputs.tf

# generating files
OUTPUT_TO=_"$sId"_outputs.tf
REMOTE_STATE=_"$sId"_remote_state.tf
DATA_TF=_"$sId"_data.tf
LOCALS_TF=_"$sId"_locals.tf
TFSTATE=_"$sId"_tfstate

# temporary files
TFSTATE_LIST=_"$sId"_tfstate_list
DEPENDENCY_GRAPH_DST_TO_SRC=_"$sId"_dependency_graph_dst_to_src
DEPENDENCY_GRAPH_SRC_TO_DST=_"$sId"_dependency_graph_src_to_dst
OVERRIDE=override.tf

function usage() {
    echo "Usage: $1 [-y] -s <src pj dir> -d <dst pj dir> [-f <target files>]"
    echo "  -y: dry run"
    echo "  -s: source project directory"
    echo "  -d: destination project directory"
    echo "  -f: target files"
    echo "  -h: show this help"
}

function error() {
}

function override_backend {
    cat << EOF > $OVERRIDE
terraform {
  backend "local" {
  }
}
EOF
}

function restore_backend_from_override {
    rm -f $OVERRIDE
}

function _pushd {
    pushd "$@" > /dev/null
}

function _popd {
    popd "$@" > /dev/null
}

function state_mv {
    local src_pj_dir=$1
    local dst_pj_dir=$2
    local rsc=$3
    local dry_run=$4

    if [[ $dry_run == "true" ]]; then
        echo terraform state mv -state="${src_pj_dir}"/$TFSTATE -state-out="${dst_pj_dir}"/$TFSTATE \'"$rsc"\' \'"$rsc"\'
    else
        terraform state mv -state="${src_pj_dir}"/$TFSTATE -state-out="${dst_pj_dir}"/$TFSTATE $rsc $rsc
    fi
}

# create reference from dst pj to src pj
function replace_to_indirect_for_src {
    local src_pj_dir=$1
    local dst_pj_dir=$2
    local rsc=$3
    local state_alias=$4
    local dry_run=$5

    # keep value reference between src and dst
    while read -r field; do
        local file=$(echo $field | cut -d, -f1)

        [[ $file == "locals.tf" || $file == "moved.tf" ]] && continue

        for var in $(echo $field | cut -d, -f2- | tr ',' ' '); do
            local label=$(echo $var | gsed -e 's/\./_/g' -e 's/^module.//g')

            if [[ $dry_run == "true" ]] ; then
                echo "echo \"output \\\"$label\\\" {\\n value = $var \\n}\" >> $dst_pj_dir/$OUTPUT_TO"
                echo "gsed -i s/$var/data.terraform_remote_state.$state_alias.outputs.$label/g $src_pj_dir/$file"
            else
                if ! grep -q "output \"$label\"" "$dst_pj_dir"/$OUTPUT_TO 2> /dev/null; then
                    echo "output \"$label\" {\n value = $var \n}" >> "$dst_pj_dir"/$OUTPUT_TO
                fi
                gsed -i "s/$var/data.terraform_remote_state.$state_alias.outputs.$label/g" $src_pj_dir/$file
            fi
        done
    done < <(cat $src_pj_dir/$DEPENDENCY_GRAPH_DST_TO_SRC | jq -r ".[] | select(.name == \"$rsc\") | [.ref.file, .ref.vars[]] |@csv" | sed 's/\"//g')
}

function replace_to_indirect_for_dst {
    local src_pj_dir=$1
    local dst_pj_dir=$2
    local tgt_file=$3
    local state_alias=$4
    local dry_run=$5

    while read -r field; do
        for var in $(echo $field | tr ',' ' '); do
            local label=$(echo $var | gsed -e 's/\./_/g' -e 's/^module.//g')

            if [[ $dry_run == "true" ]] ; then
                echo "echo \"output \\\"$label\\\" {\\n value = $var \\n}\" >> $src_pj_dir/$OUTPUT_TO"
                echo "gsed -i s/$var/data.terraform_remote_state.$state_alias.outputs.$label/g $dst_pj_dir/$tgt_file"
            else
                if ! grep -q "output \"$label\"" "$src_pj_dir"/$OUTPUT_TO 2> /dev/null; then
                    echo "output \"$label\" {\n value = $var \n}" >> "$src_pj_dir"/$OUTPUT_TO
                fi
                gsed -i "s/$var/data.terraform_remote_state.$state_alias.outputs.$label/g" $dst_pj_dir/$tgt_file
            fi
        done
    done < <(cat $src_pj_dir/$DEPENDENCY_GRAPH_SRC_TO_DST | jq -r ".[] | select(.ref.file == \"$tgt_file\") | [.ref.vars[]] |@csv" | sed 's/\"//g')
}

function create_file_remote_state_ref {
    local state_alias=$1
    local file_path=$2

    cat << EOF
data "terraform_remote_state" "$state_alias" {
  backend = "local"

  config = {
    path = "$file_path"
  }
}
EOF
}

function create_s3_remote_state_ref {
    local state_alias=$1
    local tgt_provider_file=$2
    local bucket=$(hcledit attribute get terraform.backend.s3.bucket < $tgt_provider_file)
    local key=$(hcledit attribute get terraform.backend.s3.key < $tgt_provider_file)
    local region=$(hcledit attribute get terraform.backend.s3.region < $tgt_provider_file)

    cat << EOF
data "terraform_remote_state" "$state_alias" {
  backend = "s3"

  config = {
    bucket = $bucket
    key    = $key
    region = $region
  }
}
EOF
}

function init_pj {
    local pj_dir=$1
    _pushd "$pj_dir" || exit

    if [ ! -f provider.tf ]; then
        echo "error: provider.tf not found in $pj_dir"
        exit 1
    fi

    terraform init > /dev/null
    terraform refresh > /dev/null
    terraform state pull > $TFSTATE
    terraform state list > $TFSTATE_LIST

    _popd || exit
}

function check_nodiff {
    local pj_dir=$1

    _pushd "$pj_dir" || exit
    override_backend
    terraform init --reconfigure > /dev/null
    terraform refresh --state=$TFSTATE > /dev/null
    if terraform plan --state=$TFSTATE -detailed-exitcode > /dev/null; then
        echo "[ok] no change on $pj_dir"
    else
        echo "[error] plan failed on $pj_dir"
        restore_backend_from_override
        exit 1
    fi
    restore_backend_from_override
    _popd || exit
}

dry_run="true"

src_pj_dir=
dst_pj_dir=
target_files=

while getopts ys:d:f:h flag
do
    case "${flag}" in
        y) dry_run="false";;
        s) src_pj_dir=${OPTARG};;
        d) dst_pj_dir=${OPTARG};;
        f) target_files=${OPTARG};;
        h) usage $0; exit 0;;
    esac
done

echo "dry run: $dry_run"

if [[ ! -d "$src_pj_dir" ]]; then
  echo "error: invalid src pj directory $src_pj_dir"
  exit 1
fi

if [[ ! -d "$dst_pj_dir" ]]; then
  echo "error: invalid dst pj directory $dst_pj_dir"
  exit 1
fi

src_pj_dir=$(echo "$src_pj_dir" | sed 's/\/$//')
dst_pj_dir=$(echo "$dst_pj_dir" | sed 's/\/$//')

state_alias=$(basename $src_pj_dir)_$sId

echo "initializing dstDir: $dst_pj_dir ..."
init_pj "$dst_pj_dir"

echo "initializing srcDir: $src_pj_dir ..."
init_pj "$src_pj_dir"

if [[ "$target_files" == "" ]]; then
  _pushd "$src_pj_dir" || exit
  target_files=$(find -- *.tf | peco --prompt "select target files")
  _popd || exit
fi
if [[ "$target_files" == "" ]]; then
    echo "no target"
    exit
fi

#
_pushd "$src_pj_dir" || exit
echo "creating dep graph ..."
tf-dependency $(echo $target_files | tr '\n' ' ') | jq . > $DEPENDENCY_GRAPH_DST_TO_SRC
tf-dependency $(find -- *.tf | grep -v $target_files | tr '\n' ' ') | jq . > $DEPENDENCY_GRAPH_SRC_TO_DST
_popd

# state mv
for tgtTf in $(echo $target_files); do
    for rsc in $(hcledit block list < "${src_pj_dir}/$tgtTf" | grep -e "^resource" -e "^module" | sort); do
        if [[ $(hcledit attribute get "${rsc}.for_each" < "${src_pj_dir}/$tgtTf" | wc -l) -eq 0 ]]; then
            # no for_each resource
            rsc=${rsc//#resource./}
            state_mv "$src_pj_dir" "$dst_pj_dir" "$rsc" "$dry_run"
            replace_to_indirect_for_src "$src_pj_dir" "$dst_pj_dir" "$rsc" "$state_alias" "$dry_run"
        else
            # for_each resource
            rsc=${rsc//#resource./}

            while read -r each_rsc; do
                state_mv "$src_pj_dir" "$dst_pj_dir" "$each_rsc" "$dry_run"
                replace_to_indirect_for_src "$src_pj_dir" "$dst_pj_dir" "$each_rsc" "$state_alias" "$dry_run"
            done < <(grep "$rsc" "${src_pj_dir}"/$TFSTATE_LIST)
        fi
    done

    if [[ $dry_run == "false" ]]; then
        mv ${src_pj_dir}/${tgtTf} ${dst_pj_dir}/${tgtTf}
    fi

    replace_to_indirect_for_dst "$src_pj_dir" "$dst_pj_dir" "$tgtTf" "$state_alias" "$dry_run"
done


if [[ $dry_run == "false" ]]; then
    cat "$src_pj_dir"/*.tf | hcledit block get data   > "$dst_pj_dir"/"$DATA_TF"
    cat "$src_pj_dir"/*.tf | hcledit block get locals > "$dst_pj_dir"/"$LOCALS_TF"

    relpath=$(grealpath -m --relative-to="$dst_pj_dir" "$src_pj_dir")/$TFSTATE
    create_file_remote_state_ref $state_alias $relpath > "$dst_pj_dir"/$REMOTE_STATE

    relpath=$(grealpath -m --relative-to="$src_pj_dir" "$dst_pj_dir")/$TFSTATE
    create_file_remote_state_ref $state_alias $relpath > "$src_pj_dir"/$REMOTE_STATE

    check_nodiff "$dst_pj_dir"
    check_nodiff "$src_pj_dir"
fi

if [[ $dry_run == "false" ]]; then
    create_s3_remote_state_ref $state_alias "$dst_pj_dir"/provider.tf > "$src_pj_dir"/$REMOTE_STATE
    create_s3_remote_state_ref $state_alias "$src_pj_dir"/provider.tf > "$dst_pj_dir"/$REMOTE_STATE

    echo "# state and file move completed"
    echo "# please check the result and run following command to apply"
    echo
    echo "cd $src_pj_dir"
    echo "terraform state push $TFSTATE"
    echo "terraform init --reconfigure"
    echo "terraform plan"
    echo "git add $target_files"
    echo "git add $REMOTE_STATE"
    echo
    echo "cd $dst_pj_dir"
    echo "terraform state push $TFSTATE"
    echo "terraform init --reconfigure"
    echo "terraform plan"
    echo "git add $target_files"
    echo "git add $OUTPUT_TO"
fi

# cleanup
rm -f $src_pj_dir/$TFSTATE_LIST $src_pj_dir/$DEPENDENCY_GRAPH_DST_TO_SRC $src_pj_dir/$DEPENDENCY_GRAPH_SRC_TO_DST
rm -f $dst_pj_dir/$TFSTATE_LIST
