#!/bin/zsh
#
# Description:
#  This script is used to move terraform state from one project to another.
#  If you want to move state in the same project, use `moved block` instead.
#

set -eu

function usage() {
    echo "Usage: $1 [-y] -s <src pj dir> -d <dst pj dir> [-f <target files>]"
    echo "  -y: dry run"
    echo "  -s: source project directory"
    echo "  -d: destination project directory"
    echo "  -f: target files"
    echo "  -h: show this help"
}

function override_backend {
    cat << EOF > override.tf
terraform {
  backend "local" {
  }
}
EOF
}

function restore_backend_from_override {
    rm -f override.tf
}

dryRun="true"

srcPjDir=
dstPjDir=
tgtFiles=

while getopts ys:d:f: flag
do
    case "${flag}" in
        y) dryRun="false";;
        s) srcPjDir=${OPTARG};;
        d) dstPjDir=${OPTARG};;
        f) tgtFiles=${OPTARG};;
        h) usage $0; exit 0;;
    esac
done

echo "dry run: $dryRun"

if [[ ! -d "$srcPjDir" ]]; then
  echo "error: invalid src pj dir"
  exit 1
fi

if [[ ! -d "$dstPjDir" ]]; then
  echo "error: invalid dst pj dir"
  exit 1
fi

srcPjDir=$(echo "$srcPjDir" | sed 's/\/$//')
dstPjDir=$(echo "$dstPjDir" | sed 's/\/$//')

pushd "$dstPjDir" || exit
terraform init
terraform state pull > tfstate
terraform state list > tfstate_list
popd || exit

pushd "$srcPjDir" || exit
terraform init
terraform state pull > tfstate
terraform state list > tfstate_list
popd || exit

if [[ "$tgtFiles" == "" ]]; then
  pushd "$srcPjDir" || exit
  tgtFiles=$(find -- *.tf | peco --prompt "select target files")
  popd || exit
fi

for tgt in $tgtFiles; do
  for rsc in $(hcledit block list < "${srcPjDir}/$tgt" | grep -e "^resource" -e "^module" | sort); do
    if [[ $(hcledit attribute get "${rsc}.for_each" < "${srcPjDir}/$tgt" | wc -l) -eq 0 ]]; then
      # no for_each resource
      rsc=${rsc//#resource./}

      echo terraform state mv -state="${srcPjDir}"/tfstate -state-out="${dstPjDir}"/tfstate "$rsc" "$rsc"
      if [[ $dryRun == "false" ]]; then
        terraform state mv -state="${srcPjDir}"/tfstate -state-out="${dstPjDir}"/tfstate "$rsc" "$rsc"
      fi
    else
      # for_each resource
      rsc=${rsc//#resource./}

      while read -r each_rsc; do
        echo terraform state mv -state="${srcPjDir}"/tfstate -state-out="${dstPjDir}"/tfstate \'"$each_rsc"\' \'"$each_rsc"\'
        if [[ $dryRun == "false" ]]; then
          terraform state mv -state="${srcPjDir}"/tfstate -state-out="${dstPjDir}"/tfstate \'"$each_rsc"\' \'"$each_rsc"\'
        fi
      done < <(grep "$rsc" "${srcPjDir}"/tfstate_list)
    fi
  done

  mv ${srcPjDir}/$tgt ${dstPjDir}/$tgt

  pushd "$srcPjDir" || exit
  override_backend
  terraform init --reconfigure
  if terraform plan --state=tfstate -detailed-exitcode; then
    echo "[ok] no change on $srcPjDir"
  else
    echo "[error] change detected or plan failed on $srcPjDir"
    restore_backend_from_override
    exit 1
  fi
  restore_backend_from_override
  popd || exit

  pushd "$dstPjDir" || exit
  override_backend
  terraform init --reconfigure
  if terraform plan --state=tfstate -detailed-exitcode; then
    echo "[ok] no change on $dstPjDir"
  else
    echo "[error] change detected or plan failed on $dstPjDir"
    restore_backend_from_override
    exit 1
  fi
  restore_backend_from_override
  popd || exit
done

echo "state and file move completed"
echo "please check the result and run following command to apply"
echo
echo "cd $srcPjDir"
echo "terraform state push tfstate"
echo "terraform plan"
echo "cd $dstPjDir"
echo "terraform state push tfstate"
echo "terraform plan"
