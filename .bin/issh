#!/bin/zsh
#
# issh: wrapper for lshost providing interactive ssh
#

#set -xeu
set -u

function usage()
{
	echo "usage: $1 [options]"
	echo "	-h         print this usage and exit"
	echo "	-f         set filter for lshost"
	echo "	-u         update host cache file"
	echo "	-s         choose from history"
	echo "  -c         command executed on remote host"
	echo "  -t         set sort key as launchtime"
}

function single_ssh()
{
	local tgt_server=${1:-""}
	local cmd=${2:-""}
	local instid=$(echo ${tgt_server} | cut -d"," -f 1 | sed 's/ *//g')
	local role=$(echo ${tgt_server} | cut -d"," -f 3 | sed 's/ *//g')
	local ipaddr=$(echo ${tgt_server} | cut -d"," -f 4 | sed 's/ *//g')
	local stage=$(echo ${tgt_server} | cut -d"," -f 6 | sed 's/ *//g')

	if [ "${ipaddr}" != "" ]; then
		echo "** [${bname}] target: ${tgt_server}"

		sed -i '' '/^"${instid}"/d' $hfile
		echo ${tgt_server} >> $hfile

		sed -i '' "s/AWS_ROLE_NAME=.*$/AWS_ROLE_NAME="${role}"/" ${envfile}
		sed -i '' "s/AWS_STAGE_NAME=.*$/AWS_STAGE_NAME="${stage}"/" ${envfile}

		if [ `wc -l < $hfile` -gt $histsize ]; then
			sed -i '' '1d' $hfile
		fi

		if [ -x "`which sshrc 2> /dev/null`" ]; then
			echo "** [${bname}] sshrc to: ${ipaddr}"
			if [ ! -z $cmd ]; then echo "** remote executing command: $cmd"; fi
			sshrc ${ipaddr} -t $cmd
		else
			echo "** [${bname}] ssh to: ${ipaddr}"
			if [ ! -z $cmd ]; then echo "** remote executing command: $cmd"; fi
			ssh ${ipaddr} -t $cmd
		fi
	fi
}

function multi_ssh()
{
	local tgt_servers=${1:-""}
	local cmd=${2:-""}
	local ip_list=""

	if [ ! -x "`which xpanes 2> /dev/null`" ]; then
		echo "error: xpanes not found" >&2
		exit 1
	fi

	for tgt_server in ${tgt_servers}; do
		ip_list=${ip_list}" "$(echo ${tgt_server} | cut -d"," -f 4 | sed 's/ *//g')
	done

	default_shell=$(tmux show-options -g default-shell | cut -d' ' -f2 | tr -d \")
	default_cmd=$(tmux show-options -g default-command | cut -d' ' -f2 | tr -d \")

	tmux set -g default-shell   /bin/bash
	tmux set -g default-command /bin/bash

	echo $ip_list | xpanes -c "ssh {} -t '$cmd'"

	tmux set -g default-shell   ${default_shell}
	tmux set -g default-command ${default_cmd}
}

update=0
nossh=0
hist=0
bname=`basename $0`
hfile=~/.cache/isshhists
envfile=~/.sshrc.d/.env
histsize=10
filter=
role=
stage=
proj=
cmd=
sort_key=3

lshost=lsaws

while getopts r:s:p:c:lfnth OPT;
do
	case $OPT in
		"r") role="$OPTARG";;
		"s") stage="$OPTARG";;
		"p") proj="$OPTARG";;
		"c") cmd="$OPTARG";;
		"l") hist=1;;
		"f") update=1;;
		"n") nossh=1;;
		"t") sort_key=9;;
		"h") usage ${bname}; exit;;
		"*") usage ${bname}; exit;;
	esac
done

if [ ! -x "`which ${lshost} 2> /dev/null`" ]; then
	echo "error: ${lshost} not found" >&2
	exit 1
fi

if [ ! -x "`which peco 2> /dev/null`" ]; then
	echo "error: peco not found" >&2
	exit 1
fi

if [ ! -z ${role} ]; then filter=${filter}" Role:${role}"; fi
if [ ! -z ${stage} ]; then filter=${filter}" Stage:${stage}"; fi
if [ ! -z ${proj} ]; then filter=${filter}" Project:${proj}"; fi

if [ $hist = 0 ]; then
	if [ $update = 1 ]; then
		tgt_server=$(${lshost} -u -l ${filter} | sort -t, -k${sort_key} | peco)
	else
		tgt_server=$(${lshost} -l ${filter} | sort -t, -k${sort_key} | peco)
	fi
else
	tgt_server=$(cat $hfile | sort -t, -k${sort_key} | peco)
fi

if [ $nossh = 1 ]; then
	echo $tgt_server
	exit
fi

sel_count=$(echo $tgt_server | wc -l)

if [ $sel_count -lt 2 ]; then
	single_ssh $tgt_server $cmd
else
	multi_ssh $tgt_server $cmd
fi
