#!/bin/zsh
#
# issh: wrapper for lshost providing interactive ssh
#

#set -xeu
set -u

function usage()
{
	echo "usage: $1 [options]"
	echo "	-h         print this usage and exit"
	echo "	-f         set filter for lshost"
	echo "	-u         update host cache file"
	echo "	-s         choose from history"
}

function single_ssh()
{
	tgt_server=$1
	local instid=$(echo ${tgt_server} | cut -d"," -f 1 | sed 's/ *//g')
	local role=$(echo ${tgt_server} | cut -d"," -f 3 | sed 's/ *//g')
	local ipaddr=$(echo ${tgt_server} | cut -d"," -f 4 | sed 's/ *//g')
	local stage=$(echo ${tgt_server} | cut -d"," -f 6 | sed 's/ *//g')

	if [ $? -eq 0 -a "${ipaddr}" != "" ]; then
		echo "** [${bname}] target: ${tgt_server}"

		sed -i '' '/^"${instid}"/d' $hfile
		echo ${tgt_server} >> $hfile

		sed -i '' "s/AWS_ROLE_NAME=.*$/AWS_ROLE_NAME="${role}"/" ${envfile}
		sed -i '' "s/AWS_STAGE_NAME=.*$/AWS_STAGE_NAME="${stage}"/" ${envfile}

		if [ `wc -l < $hfile` -gt $histsize ]; then
			sed -i '' '1d' $hfile
		fi

		if [ -x "`which sshrc 2> /dev/null`" ]; then
			echo "** [${bname}] sshrc to: ${ipaddr}"
			sshrc ${ipaddr}
		else
			echo "** [${bname}] ssh to: ${ipaddr}"
			ssh ${ipaddr}
		fi
	fi
}

function multi_ssh()
{
}

update=0
hist=0
bname=`basename $0`
hfile=~/.cache/isshhists
envfile=~/.sshrc.d/.env
histsize=10
filter=
role=
stage=
proj=

lshost=lsaws

while getopts r:s:p:lfh OPT;
do
	case $OPT in
		"r") role="$OPTARG";;
		"s") stage="$OPTARG";;
		"p") proj="$OPTARG";;
		"l") hist=1;;
		"f") update=1;;
		"h") usage ${bname}; exit;;
	esac
done

if [ ! -x "`which ${lshost} 2> /dev/null`" ]; then
	echo "error: ${lshost} not found" >&2
	exit 1
fi

if [ ! -x "`which peco 2> /dev/null`" ]; then
	echo "error: peco not found" >&2
	exit 1
fi

if [ ! -z ${role} ]; then filter=${filter}" Role:${role}"; fi
if [ ! -z ${stage} ]; then filter=${filter}" Stage:${stage}"; fi
if [ ! -z ${proj} ]; then filter=${filter}" Project:${proj}"; fi

if [ $hist = 0 ]; then
	if [ $update = 1 ]; then
		tgt_server=$(${lshost} -u -l ${filter} | peco)
	else
		tgt_server=$(${lshost} -l ${filter} | peco)
	fi
else
	tgt_server=$(cat $hfile | peco)
fi

sel_count=$(echo $tgt_server | wc -l)

if [ $sel_count -lt 2 ]; then
	single_ssh $tgt_server
else
	multi_ssh $tgt_server
fi
